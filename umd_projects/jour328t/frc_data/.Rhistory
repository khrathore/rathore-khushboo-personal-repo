colors <- c("red", "red", "red", "blue", "blue", "blue")
}
for (n in 1:length(all_teams)) {
team_key <- all_teams[n]
alliance_color <- colors[n]
data <- data.frame(c(team_key = team_key, alliance_color = alliance_color, match_info['comp_level'], match_info['event_key'], match_info['key'], match_info['winning_alliance'], match_info['alliances.blue.score'], match_info['alliances.red.score'])) %>%
rename(blue_score = alliances.blue.score, red_score = alliances.red.score)
data_by_team <- rbind(data_by_team, data)
}
}
for (y in 1:nrow(matches_subset)) {
expand_df(y)
}
View(data)
View(data_by_team)
column_names <- c("team_key", "alliance_color", "comp_level", "event_key", "key", "winning_alliance", "blue_score", "red_scoare")
data_by_team <- data.frame(matrix(ncol = length(column_names), nrow = 0))
View(data_by_team)
matchdata <- 2
match_info <- matches_clean[matchdata, ]
red_teams <- str_split(match_info$alliances.red.team_keys[[1]], " ")
blue_teams <- str_split(match_info$alliances.blue.team_keys[[1]], " ")
all_teams <- c(red_teams, blue_teams)
if (length(all_teams) == 4) {
colors <- c("red", "red", "blue", "blue")
} else if (length(all_teams) == 6) {
colors <- c("red", "red", "red", "blue", "blue", "blue")
}
for (n in 1:length(all_teams)) {
team_key <- all_teams[n]
alliance_color <- colors[n]
data <- data.frame(c(team_key = team_key, alliance_color = alliance_color, match_info['comp_level'], match_info['event_key'], match_info['key'], match_info['winning_alliance'], match_info['alliances.blue.score'], match_info['alliances.red.score'])) %>%
rename(blue_score = alliances.blue.score, red_score = alliances.red.score)
data_by_team <- rbind(data_by_team, data)
}
expand_df <- function(matchdata) {
match_info <- matches_clean[matchdata, ]
red_teams <- str_split(match_info$alliances.red.team_keys[[1]], " ")
blue_teams <- str_split(match_info$alliances.blue.team_keys[[1]], " ")
all_teams <- c(red_teams, blue_teams)
if (length(all_teams) == 4) {
colors <- c("red", "red", "blue", "blue")
} else if (length(all_teams) == 6) {
colors <- c("red", "red", "red", "blue", "blue", "blue")
}
for (n in 1:length(all_teams)) {
team_key <- all_teams[n]
alliance_color <- colors[n]
data <- data.frame(c(team_key = team_key, alliance_color = alliance_color, match_info['comp_level'], match_info['event_key'], match_info['key'], match_info['winning_alliance'], match_info['alliances.blue.score'], match_info['alliances.red.score'])) %>%
rename(blue_score = alliances.blue.score, red_score = alliances.red.score)
data_by_team <- rbind(data_by_team, data)
}
}
View(data_by_team)
for (y in 1:nrow(matches_subset)) {
print(y)
expand_df(y)
}
#matchdata <- 2
expand_df <- function(matchdata) {
match_info <- matches_clean[matchdata, ]
red_teams <- str_split(match_info$alliances.red.team_keys[[1]], " ")
blue_teams <- str_split(match_info$alliances.blue.team_keys[[1]], " ")
all_teams <- c(red_teams, blue_teams)
if (length(all_teams) == 4) {
colors <- c("red", "red", "blue", "blue")
} else if (length(all_teams) == 6) {
colors <- c("red", "red", "red", "blue", "blue", "blue")
}
for (n in 1:length(all_teams)) {
team_key <- all_teams[n]
alliance_color <- colors[n]
data <- data.frame(c(team_key = team_key, alliance_color = alliance_color, match_info['comp_level'], match_info['event_key'], match_info['key'], match_info['winning_alliance'], match_info['alliances.blue.score'], match_info['alliances.red.score'])) %>%
rename(blue_score = alliances.blue.score, red_score = alliances.red.score)
data_by_team <- rbind(data_by_team, data)
}
}
for (y in 1:nrow(matches_subset)) {
print(y)
expand_df(y)
}
View(data_by_team)
for (y in 1:nrow(matches_subset)) {
print(y)
expand_df(y)
}
#matchdata <- 2
expand_df <- function(matchdata) {
match_info <- matches_clean[matchdata, ]
red_teams <- str_split(match_info$alliances.red.team_keys[[1]], " ")
blue_teams <- str_split(match_info$alliances.blue.team_keys[[1]], " ")
all_teams <- c(red_teams, blue_teams)
if (length(all_teams) == 4) {
colors <- c("red", "red", "blue", "blue")
} else if (length(all_teams) == 6) {
colors <- c("red", "red", "red", "blue", "blue", "blue")
}
for (n in 1:length(all_teams)) {
team_key <- all_teams[n]
alliance_color <- colors[n]
data <- data.frame(c(team_key = team_key, alliance_color = alliance_color, match_info['comp_level'], match_info['event_key'], match_info['key'], match_info['winning_alliance'], match_info['alliances.blue.score'], match_info['alliances.red.score'])) %>%
rename(blue_score = alliances.blue.score, red_score = alliances.red.score)
data_by_team <<- rbind(data_by_team, data)
}
}
for (y in 1:nrow(matches_subset)) {
print(y)
expand_df(y)
}
expand_df(c(1:nrow(matches_clean)))
View(data_by_team)
team_data_clean <- data_by_team %>%
filter(!(red_score < 0 | blue_score < 0))
View(team_data_clean)
View(team_data_clean)
View(team_data_clean)
library(xml2)
library(methods)
library(tidyverse)
library(XML)
library(furrr)
library(stringi)
library(httr)
library(rlang)
library(janitor)
library(paws)
library(aws.s3)
library(tools)
library(pdftools)
library(sys)
if (!require("ppcong")) {
install.packages("ppcong")
library(ppcong)
}
#xml_listing <- xml_find_first(current_data, ".//dbo.filer")
#file_number <- 1
# Function to convert all xml listings into a table for each filer
xml_to_table <- function(file_number) {
xml_listing <- all_listings[[file_number]]
# Get attributes of filer and office name
LastName <- xml_attr(xml_listing, "LastName")
FirstName <- xml_attr(xml_listing, "FirstName")
OfficeName <- xml_attr(xml_find_first(xml_listing, ".//dbo.Office"), "OfficeName")
# Create a list of all filings made my the filer
all_filings <- xml_find_all(xml_listing, ".//dbo.Document")
traveler_filings <- data.frame()
#For each filing, extract information and put it in a dataframe
for(filing_num in 1:length(all_filings)) {
filing <- all_filings[[filing_num]]
ReportingYear <- xml_attr(filing, "ReportingYear")
BeginTravelDate <- xml_attr(filing, "BeginTravelDate")
EndTravelDate <- xml_attr(filing, "EndTravelDate")
DateReceived <- xml_attr(filing, "DateReceived")
TransactionDate <- xml_attr(filing, "TransactionDate")
Pages <- xml_attr(filing, "Pages")
ReportTitle <- xml_attr(xml_find_first(filing, ".//dbo.Reports"), "ReportTitle")
DocURL <- xml_attr(xml_find_first(filing, ".//dbo.Reports"), "DocURL")
report_data <- c(LastName, FirstName, OfficeName, ReportTitle, ReportingYear, BeginTravelDate, EndTravelDate, DateReceived, TransactionDate, Pages, DocURL)
traveler_filings <- rbind(traveler_filings, report_data)
}
traveler_filings <- setNames(traveler_filings, c("filer_lastname", "filer_firstname", "filer_office", "report_title", "reporting_year", "begin_travel_date", "end_travel_date", "date_received", "transaction_date", "num_pages", "doc_url")) %>%
mutate(begin_travel_date = as.Date(begin_travel_date,  "%m/%d/%Y")) %>%
mutate(end_travel_date = as.Date(end_travel_date,  "%m/%d/%Y")) %>%
mutate(date_received = as.Date(date_received,  "%m/%d/%Y")) %>%
mutate(transaction_date = as.Date(transaction_date,  "%m/%d/%Y")) %>%
mutate(num_pages = as.double(num_pages)) %>%
mutate(reporting_year = as.double(reporting_year)) %>%
mutate(doc_url = str_replace(doc_url, "http:", "https:"))
}
# Pulls a list of senate members for given session from ProPublica's API
senate_members <- function(senate_year) {
senators_session <- ppc_members(congress = senate_year, chamber = "senate")
}
# Expands a dataframe of senators to have one row for each year they were in office
expand_df <- function(senator) {
senator_info <- senate_problems[senator, ]
if (senator_info$finitial_lname == "E KENNEDY") {
num_years <- 2009 - senator_info$first_year
} else {
num_years <- senator_info$next_election - senator_info$first_year
}
df_senator <- tibble()
n <- 0
first_year <- senator_info$first_year
while (n <= num_years) {
sen_info <- senator_info %>%
mutate(reporting_year = first_year + n)
df_senator <- rbind(df_senator, sen_info)
n <- n + 1
}
df_senator
}
download_file_with_retry <- function(url, destination, max_attempts = 10) {
tryCatch(
{
download.file(url, destination, mode = "wb")
message("File downloaded successfully!")
},
error = function(e) {
if (max_attempts > 0) {
message("Error occurred:", e)
message("Retrying download...")
Sys.sleep(5)  # Wait for 5 seconds before retrying
download_file_with_retry(url, destination, max_attempts - 1)
} else {
message("Max attempts reached. Download failed.")
}
}
)
}
pdf_downloads <- function(row_num) {
pdf <- new_docs$doc_url[row_num]
file_name <- new_docs$file_name[row_num]
pdf_path <- paste0("senate_files/file_download_local/", file_name)
download_file_with_retry(pdf, pdf_path)
}
make_request <- function(link) {
print(url <- link)
tokens <- POST("https://accounts.muckrock.com/api/token/", body=list(username="dwillis-umd", password="Zm7Qdm9PGEwH2hj"), encode="json")
refresh <- POST("https://accounts.muckrock.com/api/refresh/", body=list(refresh=content(tokens)$refresh))
header <- paste("Bearer", content(refresh)$access)
response <- GET(url, add_headers(Authorization=header))
content(response, as="parsed")
if (response$status_code == 403) {
refresh <- POST("https://accounts.muckrock.com/api/refresh/", body=list(refresh=content(tokens)$refresh))
header <- paste("Bearer", content(refresh)$access)
response <- GET(url, add_headers(Authorization=header))
content(response, as="parsed", encoding=charset)
} else {
header <- paste("Bearer", content(refresh)$access)
response <- GET(url, add_headers(Authorization=header))
content(response, as="parsed", encoding=charset)
}
}
# Gets the current senate xml data and converts to a dataframe, then CSV. Each day this is run, you will get three more files in the data folder, so proceed with caution.
# Get the current date
today_date <- Sys.Date()
# Create a file path for the zip to download and download the zip file there
zip_loc <- paste0("senate_files/data/senate_data_original/senate_data_", today_date, ".zip")
#zip_loc <- "data/senate_data_original/senate_data_2023-10-25.zip"
download.file("https://giftrule-disclosure.senate.gov/media/giftruledownloads/giftruledata.zip", zip_loc, mode = "wb")
# Create a filepath for the XML and unzip the file into the data folder
xml_loc <- gsub(".zip", ".xml", zip_loc)
unzip(zip_loc, exdir = "senate_files/data/")
#Rename the unzipped file to follow project convention
file.rename("senate_files/data/giftrule.xml", xml_loc)
#Import XML data into a nested list
current_data <- read_xml(xml_loc)
#Create a list of all the filers and their documents
all_listings <- xml_find_all(current_data, ".//dbo.filer")
# Speedy for loop to get all the information
filer_travel <- map_dfr(c(1:length(all_listings)), xml_to_table) %>%
mutate(source = today_date)
# Speedy for loop to get all the information
filer_travel <- map_dfr(c(1:length(all_listings)), xml_to_table) %>%
mutate(source = today_date)
# Speedy for loop to get all the information
filer_travel <- map_dfr(c(1:length(all_listings)), xml_to_table) %>%
mutate(source = today_date)
filer_travel_clean <- filer_travel %>%
mutate(office_firstname = str_squish(str_extract(filer_office, "(?<=,).*"))) %>%
mutate(office_last_name = gsub(".", "", str_squish(str_extract(filer_office, "^[^,]+")))) %>%
mutate(office_middle_name = str_squish(str_extract(office_firstname, "\\s(.*)"))) %>%
mutate(office_first_name = str_squish(str_extract(office_firstname, "^[^\\s]+"))) %>%
select(filer_lastname, filer_firstname, filer_office, office_first_name, office_middle_name, office_last_name, report_title, reporting_year, begin_travel_date, end_travel_date, date_received, transaction_date, num_pages, doc_url, source)
most_recent_csv <- "senate_files/data/senate_data_with_propublica/clean_propub_senate_current.csv"
# Get the data and make some cleaning changes for the old csv
last_data <- read_csv(most_recent_csv) %>%
mutate(begin_travel_date = as.Date(begin_travel_date)) %>%
mutate(end_travel_date = as.Date(end_travel_date)) %>%
mutate(date_received = as.Date(date_received)) %>%
mutate(transaction_date = as.Date(transaction_date))
# Get the data and make some cleaning changes for the old csv
last_data <- read_csv(most_recent_csv) %>%
mutate(begin_travel_date = as.Date(begin_travel_date)) %>%
mutate(end_travel_date = as.Date(end_travel_date)) %>%
mutate(date_received = as.Date(date_received)) %>%
mutate(transaction_date = as.Date(transaction_date))
# Make a list of the filings in data since data collection began on 08 September
all_filings <- filer_travel_clean %>%
full_join(last_data, by = c("filer_lastname", "filer_firstname", "filer_office", "report_title", "reporting_year", "begin_travel_date", "end_travel_date", "date_received", "transaction_date", "num_pages", "doc_url", "office_first_name", "office_last_name", "office_middle_name")) %>%
mutate(source = case_when(
is.na(source.x) ~ source.y,
TRUE~source.x)) %>%
select(-source.x, -source.y)
clean_filings <- all_filings %>%
filter(is.na(id) & source == today_date & is.na(document_link)) %>%
select(-(id:is_member))
old_filings <- all_filings %>%
filter(!(is.na(id) & source == today_date & is.na(document_link)))
download.file("https://theunitedstates.io/congress-legislators/legislators-historical.json", "data/historical_legislators.json")
download.file("https://theunitedstates.io/congress-legislators/legislators-historical.json", "data/historical_legislators.json")
download.file("https://theunitedstates.io/congress-legislators/legislators-current.json", "data/current_legislators.json")
download.file("https://theunitedstates.io/congress-legislators/legislators-current.json", "data/current_legislators.json")
historical <- fromJSON("data/historical_legislators.json")
current <- fromJSON("data/current_legislators.json")
current_teams <- fromJSON("frc_allcurrent.json")
all_teams <- fromJSON("frc_allteams.json")
dead_teams <- all_teams %>%
anti_join(current_teams)
View(dead_teams)
team_ends <- fromJSON("frc_endyears.json")
View(team_ends)
View(team_data_clean)
View(team_ends)
all_events <- fromJSON("frc_events.json")
View(all_events)
View(data_by_team)
install.packages("tidyverse")
install.packages("jsonlite")
library(tidyverse)
library(jsonlite)
library(dplyr)
column_names <- c("team_key", "alliance_color", "comp_level", "event_key", "key", "winning_alliance", "blue_score", "red_scoare")
data_by_team <- data.frame(matrix(ncol = length(column_names), nrow = 0))
#matchdata <- 2
expand_df <- function(matchdata) {
match_info <- matches_clean[matchdata, ]
red_teams <- str_split(match_info$alliances.red.team_keys[[1]], " ")
blue_teams <- str_split(match_info$alliances.blue.team_keys[[1]], " ")
all_teams <- c(red_teams, blue_teams)
if (length(all_teams) == 4) {
colors <- c("red", "red", "blue", "blue")
} else if (length(all_teams) == 6) {
colors <- c("red", "red", "red", "blue", "blue", "blue")
}
for (n in 1:length(all_teams)) {
team_key <- all_teams[n]
alliance_color <- colors[n]
data <- data.frame(c(team_key = team_key, alliance_color = alliance_color, match_info['comp_level'], match_info['event_key'], match_info['key'], match_info['winning_alliance'], match_info['alliances.blue.score'], match_info['alliances.red.score'])) %>%
rename(blue_score = alliances.blue.score, red_score = alliances.red.score)
data_by_team <<- rbind(data_by_team, data)
}
}
current_teams <- fromJSON("frc_allcurrent.json")
all_teams <- fromJSON("frc_allteams.json")
all_events <- fromJSON("frc_events.json")
dead_teams <- all_teams %>%
anti_join(current_teams)
write_json(dead_teams, "frc_deadteams.json")
team_ends <- fromJSON("frc_endyears.json")
all_matches <- fromJSON("event_results.json")
View(all_matches)
matches_clean <- all_matches %>%
select(alliances:match_number, winning_alliance) %>%
flatten() %>%
select(comp_level, event_key, key, winning_alliance, alliances.blue.score, alliances.blue.team_keys, alliances.red.score, alliances.red.team_keys)
View(matches_clean)
expand_df(c(1:nrow(matches_clean)))
View(data_by_team)
View(data_by_team)
team_data_clean <- data_by_team
View(data_by_team)
View(team_data_clean)
matches_clean <- all_matches %>%
select(alliances:match_number, winning_alliance) %>%
flatten() %>%
select(comp_level, event_key, key, winning_alliance, alliances.blue.score, alliances.blue.team_keys, alliances.red.score, alliances.red.team_keys)
View(matches_clean)
matchdata <- 96
match_info <- matches_clean[matchdata, ]
red_teams <- str_split(match_info$alliances.red.team_keys[[1]], " ")
blue_teams <- str_split(match_info$alliances.blue.team_keys[[1]], " ")
all_teams <- c(red_teams, blue_teams)
if (length(all_teams) == 4) {
colors <- c("red", "red", "blue", "blue")
} else if (length(all_teams) == 6) {
colors <- c("red", "red", "red", "blue", "blue", "blue")
}
for (n in 1:length(all_teams)) {
team_key <- all_teams[n]
alliance_color <- colors[n]
data <- data.frame(c(team_key = team_key, alliance_color = alliance_color, match_info['comp_level'], match_info['event_key'], match_info['key'], match_info['winning_alliance'], match_info['alliances.blue.score'], match_info['alliances.red.score'])) %>%
rename(blue_score = alliances.blue.score, red_score = alliances.red.score)
data_by_team <<- rbind(data_by_team, data)
}
column_names <- c("team_key", "alliance_color", "comp_level", "event_key", "key", "winning_alliance", "blue_score", "red_scoare")
data_by_team <- data.frame(matrix(ncol = length(column_names), nrow = 0))
matchdata <- 96
match_info <- matches_clean[matchdata, ]
red_teams <- str_split(match_info$alliances.red.team_keys[[1]], " ")
blue_teams <- str_split(match_info$alliances.blue.team_keys[[1]], " ")
all_teams <- c(red_teams, blue_teams)
if (length(all_teams) == 4) {
colors <- c("red", "red", "blue", "blue")
} else if (length(all_teams) == 6) {
colors <- c("red", "red", "red", "blue", "blue", "blue")
}
for (n in 1:length(all_teams)) {
team_key <- all_teams[n]
alliance_color <- colors[n]
data <- data.frame(c(team_key = team_key, alliance_color = alliance_color, match_info['comp_level'], match_info['event_key'], match_info['key'], match_info['winning_alliance'], match_info['alliances.blue.score'], match_info['alliances.red.score'])) %>%
rename(blue_score = alliances.blue.score, red_score = alliances.red.score)
data_by_team <<- rbind(data_by_team, data)
}
expand_df <- function(matchdata) {
match_info <- matches_clean[matchdata, ]
red_teams <- str_split(match_info$alliances.red.team_keys[[1]], " ")
blue_teams <- str_split(match_info$alliances.blue.team_keys[[1]], " ")
all_teams <- c(red_teams, blue_teams)
if (length(all_teams) == 4) {
colors <- c("red", "red", "blue", "blue")
} else if (length(all_teams) == 6) {
colors <- c("red", "red", "red", "blue", "blue", "blue")
}
for (n in 1:length(all_teams)) {
team_key <- all_teams[n]
alliance_color <- colors[n]
data <- data.frame(c(team_key = team_key, alliance_color = alliance_color, match_info['comp_level'], match_info['event_key'], match_info['key'], match_info['winning_alliance'], match_info['alliances.blue.score'], match_info['alliances.red.score'])) %>%
rename(blue_score = alliances.blue.score, red_score = alliances.red.score)
data_by_team <<- rbind(data_by_team, data)
}
}
View(data_by_team)
rows <- nrow(matches_clean)
expand_df(c(1:rows))
View(team_data_clean)
View(matches_clean)
View(data_by_team)
match_info <- matches_clean[220979, ]
red_teams <- str_split(match_info$alliances.red.team_keys[[1]], " ")
blue_teams <- str_split(match_info$alliances.blue.team_keys[[1]], " ")
all_teams <- c(red_teams, blue_teams)
if (length(all_teams) == 4) {
colors <- c("red", "red", "blue", "blue")
} else if (length(all_teams) == 6) {
colors <- c("red", "red", "red", "blue", "blue", "blue")
}
for (n in 1:length(all_teams)) {
team_key <- all_teams[n]
alliance_color <- colors[n]
data <- data.frame(c(team_key = team_key, alliance_color = alliance_color, match_info['comp_level'], match_info['event_key'], match_info['key'], match_info['winning_alliance'], match_info['alliances.blue.score'], match_info['alliances.red.score'])) %>%
rename(blue_score = alliances.blue.score, red_score = alliances.red.score)
data_by_team <<- rbind(data_by_team, data)
}
View(data_by_team)
expand_df <- function(matchdata) {
column_names <- c("team_key", "alliance_color", "comp_level", "event_key", "key", "winning_alliance", "blue_score", "red_scoare")
match_data <- data.frame(matrix(ncol = length(column_names), nrow = 0))
match_info <- matches_clean[220979, ]
red_teams <- str_split(match_info$alliances.red.team_keys[[1]], " ")
blue_teams <- str_split(match_info$alliances.blue.team_keys[[1]], " ")
all_teams <- c(red_teams, blue_teams)
if (length(all_teams) == 4) {
colors <- c("red", "red", "blue", "blue")
} else if (length(all_teams) == 6) {
colors <- c("red", "red", "red", "blue", "blue", "blue")
}
for (n in 1:length(all_teams)) {
team_key <- all_teams[n]
alliance_color <- colors[n]
data <- data.frame(c(team_key = team_key, alliance_color = alliance_color, match_info['comp_level'], match_info['event_key'], match_info['key'], match_info['winning_alliance'], match_info['alliances.blue.score'], match_info['alliances.red.score'])) %>%
rename(blue_score = alliances.blue.score, red_score = alliances.red.score)
match_data <- rbind(match_data, data)
}
return match_data
expand_df <- function(matchdata) {
column_names <- c("team_key", "alliance_color", "comp_level", "event_key", "key", "winning_alliance", "blue_score", "red_scoare")
match_data <- data.frame(matrix(ncol = length(column_names), nrow = 0))
match_info <- matches_clean[220979, ]
red_teams <- str_split(match_info$alliances.red.team_keys[[1]], " ")
blue_teams <- str_split(match_info$alliances.blue.team_keys[[1]], " ")
all_teams <- c(red_teams, blue_teams)
if (length(all_teams) == 4) {
colors <- c("red", "red", "blue", "blue")
} else if (length(all_teams) == 6) {
colors <- c("red", "red", "red", "blue", "blue", "blue")
}
for (n in 1:length(all_teams)) {
team_key <- all_teams[n]
alliance_color <- colors[n]
data <- data.frame(c(team_key = team_key, alliance_color = alliance_color, match_info['comp_level'], match_info['event_key'], match_info['key'], match_info['winning_alliance'], match_info['alliances.blue.score'], match_info['alliances.red.score'])) %>%
rename(blue_score = alliances.blue.score, red_score = alliances.red.score)
match_data <- rbind(match_data, data)
}
return(match_data)
}
column_names <- c("team_key", "alliance_color", "comp_level", "event_key", "key", "winning_alliance", "blue_score", "red_scoare")
data_by_team <- data.frame(matrix(ncol = length(column_names), nrow = 0))
rows <- nrow(matches_clean)
expand_df <- function(matchdata) {
match_data <- data.frame(matrix(ncol = length(column_names), nrow = 0))
match_info <- matches_clean[220979, ]
red_teams <- str_split(match_info$alliances.red.team_keys[[1]], " ")
blue_teams <- str_split(match_info$alliances.blue.team_keys[[1]], " ")
all_teams <- c(red_teams, blue_teams)
if (length(all_teams) == 4) {
colors <- c("red", "red", "blue", "blue")
} else if (length(all_teams) == 6) {
colors <- c("red", "red", "red", "blue", "blue", "blue")
}
for (n in 1:length(all_teams)) {
team_key <- all_teams[n]
alliance_color <- colors[n]
data <- data.frame(c(team_key = team_key, alliance_color = alliance_color, match_info['comp_level'], match_info['event_key'], match_info['key'], match_info['winning_alliance'], match_info['alliances.blue.score'], match_info['alliances.red.score'])) %>%
rename(blue_score = alliances.blue.score, red_score = alliances.red.score)
match_data <- rbind(match_data, data)
}
return(match_data)
}
for (row in 1:rows) {
new_data <- expand_df(row)
data_by_team <- rbind(data_by_team, new_data)
}
View(data_by_team)
for (row in 1:rows) {
new_data <- expand_df(row)
data_by_team <- rbind(data_by_team, new_data)
print(row)
}
View(all_matches)
View(data_by_team)
